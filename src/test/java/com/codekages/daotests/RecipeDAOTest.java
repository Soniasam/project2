package com.codekages.daotests;
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.hibernate.SessionFactory;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Commit;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;


import com.codekages.dao.RecipeDao;
import com.codekages.dao.UserDAO;
import com.codekages.dto.AddRecipeDTO;
import com.codekages.dto.AddUserDTO;
import com.codekages.model.Recipe;
import com.codekages.model.User;



@ExtendWith(SpringExtension.class)
@ContextConfiguration("classpath:applicationContext.xml")
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@TestPropertySource("classpath:springorm-test.properties")
public class RecipeDAOTest {

	@Autowired
	private RecipeDao recipeDao;
	@Autowired
	private UserDAO  userdao;
	@Autowired
	private SessionFactory sessionfactory;
	
	
	@Test
	@Transactional
	@Order(0)
	@Commit
	void testAddIngredient_hasAutoGeneratedId() {
		AddRecipeDTO dto = new AddRecipeDTO();
//		User user = new User();
		
		dto.setName("Beacon");
		dto.setDescription("Delicious and Healthy");
		
		AddUserDTO userDto = new AddUserDTO();
		userDto.setUsername("user123");
		userDto.setPassword("12345");
		userDto.setFirstName("Mary");
		userDto.setLastName("Jane");
		userdao.addUser(userDto);
		
		User user = userdao.getUserByUsernameAndPassword("user123", "12345");
		user.setUserRole(1);
		
		
		Recipe recipe = recipeDao.addRecipe(dto,user);
		
		
		assertEquals(1,recipe.getId());
	}
	
	
	@Test
	@Transactional
	@Order(1)
	void testGetRecipeById_Success() {
		Recipe actual = recipeDao.getRecipeById(1);
		
		User user = new User();
		user.setFirstName("Mary");
		user.setLastName("Jane");
		user.setId(1);
		user.setUsername("user123");
		user.setPassword("12345");
		user.setUserRole(1);
		
		Recipe expected = new Recipe("Beacon","Delicious and Healthy",user);
		expected.setId(1);
		
		assertEquals(expected,actual);
	}

	@Test
	@Transactional
	@Order(2)
	void testGetRecipeById_doesNotExsit() {
		Recipe actual = recipeDao.getRecipeById(1000);
	
		Recipe expected = null;
	assertEquals(expected,actual);
	}
	
}
